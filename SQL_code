**Schema (MySQL v8.0)**

    CREATE SCHEMA IF NOT EXISTS dannys_diner;
    USE dannys_diner;
    
    CREATE TABLE sales 
    (
      customer_id VARCHAR(1),
      order_date DATE,
      product_id INTEGER
    );
    
    INSERT INTO sales
      (customer_id, order_date, product_id)
    VALUES
      ('A', '2021-01-01', '1'),
      ('A', '2021-01-01', '2'),
      ('A', '2021-01-07', '2'),
      ('A', '2021-01-10', '3'),
      ('A', '2021-01-11', '3'),
      ('A', '2021-01-11', '3'),
      ('B', '2021-01-01', '2'),
      ('B', '2021-01-02', '2'),
      ('B', '2021-01-04', '1'),
      ('B', '2021-01-11', '1'),
      ('B', '2021-01-16', '3'),
      ('B', '2021-02-01', '3'),
      ('C', '2021-01-01', '3'),
      ('C', '2021-01-01', '3'),
      ('C', '2021-01-07', '3');
     
    
    CREATE TABLE menu 
    (
      product_id INTEGER,
      product_name VARCHAR(5),
      price INTEGER
    );
    
    INSERT INTO menu
      (product_id, product_name, price)
    VALUES
      ('1', 'sushi', '10'),
      ('2', 'curry', '15'),
      ('3', 'ramen', '12');
      
    
    CREATE TABLE members 
    (
      customer_id VARCHAR(1),
      join_date DATE
    );
    
    INSERT INTO members
      (customer_id, join_date)
    VALUES
      ('A', '2021-01-07'),
      ('B', '2021-01-09');

---

-- 1. What is the total amount each customer spent at the restaurant?

    SELECT sales.customer_id, SUM(menu.price) AS total_expenditure 
    FROM dannys_diner.sales
    JOIN dannys_diner.menu
    	ON sales.product_id = menu.product_id
    GROUP BY customer_id
    ORDER BY customer_id;

| customer_id | total_expenditure |
| ----------- | ----------------- |
| A           | 76                |
| B           | 74                |
| C           | 36                |

---
-- 2. How many days has each customer visited the restaurant?

    SELECT customer_id, COUNT(order_date) 
    FROM dannys_diner.sales
    GROUP BY customer_id
    ORDER BY customer_id;

| customer_id | COUNT(order_date) |
| ----------- | ----------------- |
| A           | 6                 |
| B           | 6                 |
| C           | 3                 |

---
-- 3. What was the first item from the menu purchased by each customer?

    WITH first_item 
    AS  (SELECT sales.customer_id, 
        		menu.product_name, 
        		sales.order_date,
        		ROW_NUMBER() OVER (
                  PARTITION BY sales.customer_id
                  ORDER BY sales.order_date, sales.product_id) order_rank
                  FROM dannys_diner.sales
                  JOIN dannys_diner.menu
                  ON sales.product_id = menu.product_id
                  ) 
    SELECT *
    FROM first_item
    WHERE order_rank = 1;

| customer_id | product_name | order_date | order_rank |
| ----------- | ------------ | ---------- | ---------- |
| A           | sushi        | 2021-01-01 | 1          |
| B           | curry        | 2021-01-01 | 1          |
| C           | ramen        | 2021-01-01 | 1          |

---
-- 4. What is the most purchased item on the menu and how many times was it purchased by all customers?

    SELECT menu.product_name, COUNT(sales.customer_id) AS purchase_count
    FROM dannys_diner.sales
    JOIN dannys_diner.menu
    	ON sales.product_id = menu.product_id
    GROUP BY product_name
    ORDER BY purchase_count DESC
    LIMIT 1;

| product_name | purchase_count |
| ------------ | -------------- |
| ramen        | 8              |

---
-- 5. Which item was the most popular for each customer?

    WITH items 
    	AS (SELECT sales.customer_id,
            	   menu.product_name,
            	   COUNT(sales.product_id) AS no_of_orders,
            	   DENSE_RANK() OVER (
                   PARTITION BY sales.customer_id
                   ORDER BY menu.product_id DESC) ranks
                   FROM dannys_diner.sales
                   JOIN dannys_diner.menu
                     ON sales.product_id = menu.product_id
            	GROUP BY sales.customer_id, menu.product_id, menu.product_name
                   )
    SELECT *
    FROM items
    ORDER BY customer_id;

| customer_id | product_name | no_of_orders | ranks |
| ----------- | ------------ | ------------ | ----- |
| A           | ramen        | 3            | 1     |
| A           | curry        | 2            | 2     |
| A           | sushi        | 1            | 3     |
| B           | ramen        | 2            | 1     |
| B           | curry        | 2            | 2     |
| B           | sushi        | 2            | 3     |
| C           | ramen        | 3            | 1     |

---
-- 6. Which item was purchased first by the customer after they became a member?

    WITH cte_first 
    	AS (SELECT sales.customer_id, 
            	   sales.order_date, 
            	   menu.product_name,
            	   members.join_date,
            	DENSE_RANK() OVER(
                PARTITION BY sales.customer_id
                ORDER BY sales.order_date) ranks
            FROM dannys_diner.sales
            JOIN dannys_diner.menu
            ON sales.product_id = menu.product_id
            JOIN dannys_diner.members
            ON sales.customer_id = members.customer_id
            WHERE sales.order_date >= members.join_date
            )
      SELECT *
      FROM cte_first
      WHERE ranks = 1;

| customer_id | order_date | product_name | join_date  | ranks |
| ----------- | ---------- | ------------ | ---------- | ----- |
| A           | 2021-01-07 | curry        | 2021-01-07 | 1     |
| B           | 2021-01-11 | sushi        | 2021-01-09 | 1     |

---
-- 7. Which item was purchased just before the customer became a member?

    WITH cte_first 
    	AS (SELECT sales.customer_id, 
            	   sales.order_date, 
            	   menu.product_name,
            	DENSE_RANK() OVER(
                PARTITION BY sales.customer_id
                ORDER BY sales.order_date) ranks
            FROM dannys_diner.sales
            JOIN dannys_diner.menu
            ON sales.product_id = menu.product_id
            JOIN dannys_diner.members
            ON sales.customer_id = members.customer_id
            WHERE sales.order_date <= members.join_date
            )
      SELECT *
      FROM cte_first
      WHERE ranks = 1;

| customer_id | order_date | product_name | ranks |
| ----------- | ---------- | ------------ | ----- |
| A           | 2021-01-01 | sushi        | 1     |
| A           | 2021-01-01 | curry        | 1     |
| B           | 2021-01-01 | curry        | 1     |

---
-- 8. What is the total items and amount spent for each member before they became a member?

    SELECT sales.customer_id,
           SUM(menu.price) as total_spent,
           COUNT(sales.product_id) as total_items
    FROM dannys_diner.sales
    JOIN dannys_diner.menu
    	ON sales.product_id = menu.product_id
    JOIN dannys_diner.members
        ON sales.customer_id = members.customer_id
    WHERE sales.order_date < members.join_date
    GROUP BY sales.customer_id
    ORDER BY sales.customer_id;

| customer_id | total_spent | total_items |
| ----------- | ----------- | ----------- |
| A           | 25          | 2           |
| B           | 40          | 3           |

---
-- 9.  If each $1 spent equates to 10 points and sushi has a 2x points multiplier - how many points would each customer have?

    SELECT customer_id,
    	   SUM(CASE WHEN menu.product_id = 1
        	 THEN price*20
             ELSE price*10
             END) AS points
    FROM dannys_diner.sales
    JOIN dannys_diner.menu
    ON sales.product_id = menu.product_id
    GROUP BY sales.customer_id
    ORDER BY sales.customer_id;

| customer_id | points |
| ----------- | ------ |
| A           | 860    |
| B           | 940    |
| C           | 360    |

---
-- 10. In the first week after a customer joins the program (including their join date) they earn 2x points on all items, not just sushi - how many points do customer A and B have at the end of January?

    SELECT customer_id, 
    	   SUM(total_points)
    FROM
    (WITH points AS (SELECT sales.customer_id,
            	  (sales.order_date - members.join_date) AS first_week,
                   menu.price,
            	   menu.product_name,
            	   sales.order_date
            FROM dannys_diner.sales
            JOIN dannys_diner.menu
            ON sales.product_id = menu.product_id 
            JOIN dannys_diner.members
            ON sales.customer_id = members.customer_id)
               
       SELECT customer_id,
              		 order_date,
              		 CASE 
              	 	 WHEN first_week BETWEEN 0 AND 7 THEN price*20
              		 WHEN (first_week > 7 OR first_week < 0) AND product_name = "sushi" THEN price*20
              		 WHEN (first_week > 7 OR first_week < 0) AND product_name != "sushi" THEN price*10
              		 END AS total_points
              	 	 FROM points
              	 	 WHERE EXTRACT (MONTH FROM order_date) = 1) as t
    GROUP BY customer_id;

| customer_id | SUM(total_points) |
| ----------- | ----------------- |
| B           | 940               |
| A           | 1370              |

---
